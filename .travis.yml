language: rust
cache: cargo

env:
  global:
    # This will be part of the release tarball
    - PROJECT_NAME=fondbot
    - MAKE_DEB=yes
    - DEB_MAINTAINER="Shou Ya <shouyatf@gmail.com>"
    - DEB_DESCRIPTION="Tiny telegram bot written in Rust"

# AFAICT There are a few ways to set up the build jobs. This one is not the DRYest but I feel is the
# easiest to reason about.
matrix:
  include:
    # Nightly channel
    - os: osx
      rust: nightly
      env: TARGET=i686-apple-darwin
    - os: linux
      rust: nightly
      env: TARGET=i686-unknown-linux-gnu
      addons:
        apt:
          packages:
            - gcc-multilib
            - openssl-dev
    - os: linux
      rust: nightly
      env: TARGET=i686-unknown-linux-musl
      dist: trusty
      sudo: required
      addons:
        apt:
          packages:
          - musl
          - musl-dev
          - musl-tools
    - os: osx
      rust: nightly
      env: TARGET=x86_64-apple-darwin
    - os: linux
      rust: nightly
      env: TARGET=x86_64-unknown-linux-gnu
    - os: linux
      rust: nightly
      env: TARGET=x86_64-unknown-linux-musl
      dist: trusty
      sudo: required
      addons:
        apt:
          packages:
          - musl
          - musl-dev
          - musl-tools
  allow_failures:
    # TODO You might need to allow failures for some target on some channel for some reason. Below
    # there's one (commented out) example of how to do that. Just change the OS, channel and TARGET
    # as needed.
    # - os: linux
    #   rust: stable
    #   env: TARGET=x86_64-unknown-linux-gnu

before_install:
  - export PATH="$PATH:$HOME/.cargo/bin"

install:
  - bash ci/install.sh

script:
  - bash ci/script.sh

before_deploy:
  - bash ci/before_deploy.sh

deploy:
  provider: releases
  api_key:
    secure: P/v9YzGb8iMutd2ZWnXQi0+rqnBLgvW6jnXkeEqlOcPHffx9i0GWSoXzEhFqyI5rXXGxJQZbEkKAYW6WERSadruiLeC5APwWTvUf97xAIe6yJZtLLm99FyOKO1sA6FIjQ4bHMT9q2dPqawSg2fW75ZvDx6Pig8ajfmdBNHbl3JzJz1itLwhJRjfgMNWgzJSg/rIdLiEPAB/aP03hsjTlgRkUKTvo6/4ER5ElhkvzUbXZmiCRFdD8yfPwm2j6IR35731dSVcgvYpGwyQylrt9ZBbirdxYbjWMyVocm3/o6Va2uXqe9cm8PQLc2gI4z+l/ZaKfmiCfZjlCkMr0SmrNVssBbTk/rWLnA8AlFNuI1nMoebaVdzV51gFZJabXDUJZ8SOzfCktq+rJMPoq+nAqr+HKqEe/9B3LI84/U2atnfnwE+USHqfMBl4PpgSxbXKydlGIPqvb9TXYG49Y7kJkNK2zHABe8IEXD4FJZJIx75qQgkB87JdTAmIFsrkNZBFxlTztgOr0I9oVNnX4oJL0PtOUmxq8HQTHIiMaGir2aLTDLEkNN1MbRxmu1/rZDDIjhjfCaPTZVzXnK97BxUXR5PmzgR0UMc0rPEXSBcEuT47Dwob1ri3VaOUWvmDSVKE8q+DbSBXM3AZpsfS+OH8CPQQfd+HZrJ4jaaQyY0B+IWU=
  file_glob: true
  file: ${PROJECT_NAME}-${TRAVIS_TAG}-${TARGET}.*
  # don't delete the artifacts from previous phases
  skip_cleanup: true
  # deploy when a new tag is pushed
  on:
    # channel to use to produce the release artifacts
    # condition: $TRAVIS_RUST_VERSION = nightly
    tags: true

branches:
  only:
    # Pushes and PR to the master branch
    - master
    # IMPORTANT Ruby regex to match tags. Required, or travis won't trigger deploys when a new tag
    # is pushed. This regex matches semantic versions like v1.2.3-rc4+2016.02.22
    - /^v\d+\.\d+\.\d+.*$/

notifications:
  email:
    on_success: never
